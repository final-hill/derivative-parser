/*!
 * @license
 * Copyright (C) 2020 Michael L Haufe
 * SPDX-License-Identifier: AGPL-3.0-only
 * @see <https://spdx.org/licenses/AGPL-3.0-only.html>
 */


 /**
 * @see https://en.wikipedia.org/wiki/URL#Syntax
 */
/*
const uriGrammar = [
    ['uri', 'scheme:[//authority]path[?query][#fragment]'],
    ['scheme', "alpha(alphanum | '+' | '.' | '-')*"],
    ['authority', "[userinfo'@']host[':'port]"],
    ['userinfo', "username[':'password]",
    ['username', ]
    ['PATH'],
    ['QUERY'],
    ['FRAGMENT']
];
*/


    /** a-z | A-Z */
    readonly ALPHA = this.Alt(this.Range('a', 'z'), this.Range('A', 'Z'));
    /** a-z | A-Z | 0-9 */
    readonly ALPHA_NUM = this.OneOf(this.Range('a', 'z'), this.Range('A', 'Z'), this.Range('0', '9'));
    /** A-Z */
    readonly ALPHA_UPPER = this.Range('A', 'Z');
    /** a-z */
    readonly ALPHA_LOWER = this.Range('a', 'z');
    /** Carriage Return */
    readonly CR = this.Char('\r');
    /** Carriage Return followed by Line Feed */
    readonly CRLF = this.Token('\r\n');
    /** The digits 0-9 */
    readonly DIGIT = this.Range('0', '9');
    /** Form Feed */
    readonly FF = this.Char('\f');
    /** Line Feed */
    readonly LF = this.Char('\n');
    /** The NUL character */
    readonly NUL = this.Char('\0');
    /** Space */
    readonly SP = this.Char(' ');
    /** Tab */
    readonly TAB = this.Char('\t');
    /** Vertical Tab */
    readonly VT = this.Char('\v');
    /** Linear whitespace: CRLF? ( SP | HT )+ */
    readonly LWS = this.Seq(this.Opt(this.CRLF), this.Plus(this.Alt(this.SP, this.TAB)));