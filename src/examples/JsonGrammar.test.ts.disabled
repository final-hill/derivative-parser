/*!
 * @license
 * Copyright (C) 2020 Michael L Haufe
 * SPDX-License-Identifier: AGPL-3.0-only
 * @see <https://spdx.org/licenses/AGPL-3.0-only.html>
 */

import Grammar from "../Grammar";
import { Parser } from "../Parsers";

describe('JsonGrammar', () => {
    /**
     * @see https://tools.ietf.org/html/rfc8259
     */
    class JsonGrammar extends Grammar {
        /**
         * JSON-text = ws value ws
         * @returns {Parser} -
         */
        JSON_text(): Parser {
            return this.ws().then(this.value()).then(this.ws());
        }
        /**
         * begin-array = ws '[' ws
         * @returns {Parser} -
         */
        begin_array(): Parser {
            return this.ws().then('[').then(this.ws());
        }
        /**
         * begin-object = ws '{' ws
         * @returns {Parser} -
         */
        begin_object(): Parser {
            return this.ws().then('{').then(this.ws());
        }
        /**
         * end-array = ws ']' ws
         * @returns {Parser} -
         */
        end_array(): Parser {
            return this.ws().then(']').then(this.ws());
        }
        /**
         * end-object = ws '}' ws
         * @returns {Parser} -
         */
        end_object(): Parser {
            return this.ws().then('}').then(this.ws());
        }
        /**
         * name-separator = ws ':' ws
         * @returns {Parser} -
         */
        name_separator(): Parser {
            return this.ws().then(':').then(this.ws());
        }
        /**
         * value-separator = ws ',' ws
         * @returns {Parser} -
         */
        value_separator(): Parser {
            return this.ws().then(',').then(this.ws());
        }
        /**
         * ws = (
         *      %x20 |              ; Space
         *      %x09 |              ; Horizontal tab
         *      %x0A |              ; Line feed or New line
         *      %x0D )*             ; Carriage return
         * @returns {Parser} -
         */
        ws(): Parser {
            return this.alt(' ', '\t', '\r', '\n').star();
        }
        /**
         * value = 'false' | 'null' | 'true' | object | array | number | string
         * @returns {Parser} -
         */
        value(): Parser {
            return this.alt('false', 'true', 'null', this.object(), this.array(), this.number(), this.string());
        }
        /**
         * object = begin-object [ member *( value-separator member ) ] end-object
         * @returns {Parser} -
         */
        object(): Parser {
            return this.begin_object().then(
                this.member().then(this.value_separator().then(this.member()).star()).opt()
            ).then(this.end_object());
        }
        /**
         * member = string name-separator value
         * @returns {Parser} -
         */
        member(): Parser {
            return this.seq(this.string(), this.name_separator(), this.value());
        }
        /**
         * array = begin-array [ value *( value-separator value ) ] end-array
         * @returns {Parser} -
         */
        array(): Parser {
            return this.begin_array().then(
                this.value().then(this.value_separator().then(this.value()).star()).opt()
            ).then(this.end_array());
        }
        /**
         * number = [ '-' ] int [ frac ] [ exp ]
         * @returns {Parser} -
         */
        number(): Parser {
            return this.char('-').opt().then(this.int()).then(this.frac().opt()).then(this.exp().opt());
        }
        /**
         * digit1-9 = 1-9
         * @returns {Parser} -
         */
        digit1_9(): Parser {
            return this.range('1','9');
        }
        /**
         * exp = ('e' | 'E') [ '-' | '+' ] 1*DIGIT
         * @returns {Parser} -
         */
        exp(): Parser {
            return this.alt('e','E').then(this.alt('-','+').opt()).then(this.digit().plus());
        }
        /**
         * digit = 0-9
         * @returns {Parser} -
         */
        digit (): Parser {
            return this.range('0', '9');
        }
        /**
         * frac = '.' 1*DIGIT
         * @returns {Parser} -
         */
        frac(): Parser {
            return this.char('.').then(this.digit().plus());
        }
        /**
         * int = '0' | ( digit1-9 *DIGIT )
         * @returns {Parser} -
         */
        int(): Parser {
            return this.char('0').or(this.digit1_9().then(this.digit().star()));
        }
        /**
         * string = '"' *chars '"'
         * @returns {Parser} -
         */
        string(): Parser {
            return this.char('"').then(this.chars().star()).then(this.char('"'));
        }
        /**
         * chars = unescaped |
         *       '\' ( '"' | '\' | '/' | 'b' | 'f' | 'n' | 'r' | 't' | 'u' 4HEXDIG )
         *
         * @returns {Parser} -
         */
        chars(): Parser {
            return this.unescaped().or(this.char('\\').then(this.alt('"','\\','/','b','f','n','r','t',this.char('u').then(this.hexdig().rep(4)))));
        }
        /**
         * unescaped = ' ' - '!'  | '#' - '[' | ']'- '~'
         * Not supporting full unicode due to limits of the current version of JavaScript.
         * @see https://github.com/tc39/proposal-intl-segmenter
         * @returns {Parser} -
         */
        unescaped(): Parser {
            return this.alt(this.range(' ','!'),this.range('#','['),this.range(']','~'));
        }
        /**
         * hexdig = 0-9 | A-F | a-f
         * @returns {Parser} -
         */
        hexdig(): Parser {
            return this.alt(this.range('0','9'),this.range('A','F'),this.range('a','f'));
        }
    }

    test('Json strings', () => {
        const jsonGrammar = new JsonGrammar();

        expect(jsonGrammar).toBeDefined();
        expect(jsonGrammar.matches('')).toBe(false);
        expect(jsonGrammar.matches('false')).toBe(true);
        expect(jsonGrammar.matches('f')).toBe(false);
        expect(jsonGrammar.matches('"Hello world!"')).toBe(true);
        expect(jsonGrammar.matches('42')).toBe(true);
        expect(jsonGrammar.matches(`{
            "Image": {
                "Width":  800,
                "Height": 600,
                "Title":  "View from 15th Floor",
                "Thumbnail": {
                    "Url":    "http://www.example.com/image/481989943",
                    "Height": 125,
                    "Width":  100
                },
                "Animated" : false,
                "IDs": [116, 943, 234, 38793]
              }
          }`)).toBe(true);

          expect(jsonGrammar.matches(`[
            {
               "precision": "zip",
               "Latitude":  37.7668,
               "Longitude": -122.3959,
               "Address":   "",
               "City":      "SAN FRANCISCO",
               "State":     "CA",
               "Zip":       "94107",
               "Country":   "US"
            },
            {
               "precision": "zip",
               "Latitude":  37.371991,
               "Longitude": -122.026020,
               "Address":   "",
               "City":      "SUNNYVALE",
               "State":     "CA",
               "Zip":       "94085",
               "Country":   "US"
            }
          ]`)).toBe(true);
          expect(jsonGrammar.matches(`[
            {
               "precision": "zip",
               "Latitude":  37.7668,
               "Longitude": -122.3959,
               "Address":   "",
               "City":      "SAN FRANCISCO",
               "State":     "CA",
               "Zip":       "94107",
               "Country":   "US"
            },
               "precision": "zip",
               "Latitude":  37.371991,
               "Longitude": -122.026020,
               "Address":   "",
               "City":      "SUNNYVALE",
               "State":     "CA",
               "Zip":       "94085",
               "Country":   "US"
            }
          ]`)).toBe(false);
    });
});